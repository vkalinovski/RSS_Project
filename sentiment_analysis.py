"""
–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–µ–π –≤ news.db.
‚Äî pipeline –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å truncation=True, –ø–æ—ç—Ç–æ–º—É >512 —Ç–æ–∫–µ–Ω–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–µ–∂—É—Ç—Å—è;
‚Äî –±–∞—Ç—á = 8, —á—Ç–æ —É—Å–∫–æ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∏ —ç–∫–æ–Ω–æ–º–∏—Ç –ø–∞–º—è—Ç—å.
"""

import sqlite3
from pathlib import Path
from transformers import pipeline
from tqdm import tqdm

DB_PATH = Path(__file__).parent / "news.db"
BATCH = 8

sentiment_analyzer = pipeline(
    "sentiment-analysis",
    model="distilbert-base-uncased-finetuned-sst-2-english",
    tokenizer="distilbert-base-uncased-finetuned-sst-2-english",
    device_map="auto",
)

def fetch_unprocessed():
    with sqlite3.connect(DB_PATH) as conn:
        return conn.execute(
            "SELECT id, title, content FROM news WHERE sentiment IS NULL"
        ).fetchall()

def save_sentiments(updates):
    with sqlite3.connect(DB_PATH) as conn:
        conn.executemany(
            "UPDATE news SET sentiment = ? WHERE id = ?", updates
        )
        conn.commit()

def main():
    rows = fetch_unprocessed()
    if not rows:
        print("‚úÖ  –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–∂–µ —Ä–∞–∑–º–µ—á–µ–Ω—ã")
        return

    print(f"üìä  –ù—É–∂–Ω–æ —Ä–∞–∑–º–µ—Ç–∏—Ç—å {len(rows)} —Å—Ç–∞—Ç–µ–π")
    updates = []
    for i in tqdm(range(0, len(rows), BATCH), desc="Sentiment"):
        batch = rows[i : i + BATCH]
        texts = [
            ((t or "") + " " + (c or "")) for _, t, c in batch
        ]
        preds = sentiment_analyzer(texts, truncation=True)  # ‚Üê –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç!

        for (news_id, _, _), pred in zip(batch, preds):
            label = pred["label"].lower()
            sentiment = (
                "positive" if "positive" in label else
                "negative" if "negative" in label else
                "neutral"
            )
            updates.append((sentiment, news_id))

    save_sentiments(updates)
    print("‚úÖ  –ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ:", len(updates))

if __name__ == "__main__":
    main()
