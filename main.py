# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y_j7EBQXocwJpJVWDYcIBhyr2w0ZG75C
"""

import os
import sys
import subprocess

# ----------------------------------------------------------------------------
# 0️⃣ Автоматическое клонирование репозитория (если не загружен локально)
# ----------------------------------------------------------------------------
REPO_URL = "https://github.com/vkalinovski/RSS_Project.git"
LOCAL_DIR = "RSS_Project"
if not os.path.isdir(LOCAL_DIR):
    print(f"Cloning repository from {REPO_URL}...")
    subprocess.run(["git", "clone", REPO_URL, LOCAL_DIR], check=True)

# Добавляем папку с клонированными модулями в PYTHONPATH
sys.path.insert(0, os.path.abspath(LOCAL_DIR))

# ----------------------------------------------------------------------------
# 1️⃣ Импорт модулей проекта
# ----------------------------------------------------------------------------
from rss_feeds import RSS_FEEDS
from api_fetcher import fetch_newsapi_articles
from rss import fetch_rss_articles
from database_utils import create_database, save_news_to_db
from sentiment_analysis import analyze_sentiment
from analyze import (
    build_timeseries,
    plot1_timeseries, plot2_bar_total, plot3_rolling, plot4_monthly,
    plot5_pie_sources, plot6_weekday, plot7_top_days,
    plot8_cumulative, plot9_ratio, plot10_correlation
)
from utils import now_utc
import pandas as pd

# ----------------------------------------------------------------------------
# 2️⃣ Конфигурация
# ----------------------------------------------------------------------------
KEYWORDS  = ["Emmanuel Macron", "Marine Le Pen"]
# Бесплатный тариф NewsAPI отдаёт не более 100 статей за запрос
MAX_ITEMS = 100
# Папка на Google Drive для всех выходных файлов
OUT_DIR   = "/content/gdrive/MyDrive/test"

# ----------------------------------------------------------------------------
# 3️⃣ Основная логика: сбор → фильтрация → сохранение → анализ → визуализация
# ----------------------------------------------------------------------------
def one_cycle():
    print(f"[{now_utc()}] Запуск цикла: сбор → анализ → сохранение")

    # 1) Инициализация (или проверка) БД
    create_database()

    # 2) Сбор статей
    rss_news = fetch_rss_articles(MAX_ITEMS)
    api_news = fetch_newsapi_articles(KEYWORDS, MAX_ITEMS)
    all_news = rss_news + api_news

    # 3) Фильтрация и категоризация по политическим деятелям
    macron = []
    lepen  = []
    for art in all_news:
        text = (art.get("title") or "") + " " + (art.get("content") or "")
        if "Emmanuel Macron" in text:
            macron.append({**art, "politician": "Emmanuel Macron"})
        if "Marine Le Pen" in text:
            lepen.append({**art, "politician": "Marine Le Pen"})

    # Если ничего не найдено — выходим
    if not macron and not lepen:
        print(f"[{now_utc()}] Не найдено ни одной статьи по ключевым словам.")
        return

    # 4) Сохранение в SQLite
    save_news_to_db(macron, "Emmanuel Macron")
    save_news_to_db(lepen,  "Marine Le Pen")

    # 5) Тональный анализ
    combined = macron + lepen
    sentimented = analyze_sentiment(combined)

    # 6) Построение временного ряда и сохранение CSV
    df = pd.DataFrame(sentimented)
    ts = build_timeseries(df)
    os.makedirs(OUT_DIR, exist_ok=True)
    ts.to_csv(os.path.join(OUT_DIR, "timeseries.csv"), index=True)

    # 7) Генерация 10 графиков глубокого анализа
    plot1_timeseries(ts, OUT_DIR)
    plot2_bar_total(ts, OUT_DIR)
    plot3_rolling(ts, OUT_DIR)
    plot4_monthly(ts, OUT_DIR)
    plot5_pie_sources(df, OUT_DIR)
    plot6_weekday(ts, OUT_DIR)
    plot7_top_days(ts, OUT_DIR)
    plot8_cumulative(ts, OUT_DIR)
    plot9_ratio(ts, OUT_DIR)
    plot10_correlation(ts, OUT_DIR)

    print(f"[{now_utc()}] Цикл завершён. Все результаты сохранены в {OUT_DIR}")

# ----------------------------------------------------------------------------
# 4️⃣ Точка входа
# ----------------------------------------------------------------------------
if __name__ == '__main__':
    one_cycle()
