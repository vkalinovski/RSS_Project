# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y_j7EBQXocwJpJVWDYcIBhyr2w0ZG75C
"""

import pandas as pd
import matplotlib.pyplot as plt
from typing import List, Dict


def build_timeseries(df: pd.DataFrame) -> pd.DataFrame:
    """
    Возвращает ts: индекс = дата, колонки = ['Emmanuel Macron','Marine Le Pen'], значения = counts
    """
    ts = df.groupby(['published_at','politician']).size().unstack(fill_value=0)
    ts.index = pd.to_datetime(ts.index)
    return ts.sort_index()


# ---------- 10 ВИДОВ ГРАФИКОВ ----------

def plot1_timeseries(ts: pd.DataFrame, out_dir: str):
    """Линейный график ежедневных упоминаний каждого политика."""
    plt.figure(figsize=(10,5))
    for col in ts.columns:
        plt.plot(ts.index, ts[col], label=col)
    plt.title("Ежедневные упоминания Macron vs Le Pen")
    plt.xlabel("Дата")
    plt.ylabel("Количество упоминаний")
    plt.legend()
    plt.tight_layout()
    plt.savefig(f"{out_dir}/plot1_timeseries.png")
    plt.close()


def plot2_bar_total(ts: pd.DataFrame, out_dir: str):
    """Столбчатая диаграмма суммарных упоминаний за год."""
    totals = ts.sum()
    plt.figure(figsize=(8,5))
    totals.plot(kind='bar')
    plt.title("Суммарные упоминания за последний год")
    plt.xlabel("Политический субъект")
    plt.ylabel("Всего упоминаний")
    plt.tight_layout()
    plt.savefig(f"{out_dir}/plot2_bar_total.png")
    plt.close()


def plot3_rolling(ts: pd.DataFrame, out_dir: str):
    """Скользящее среднее (7 дней) упоминаний."""
    rolling = ts.rolling(window=7, min_periods=1).mean()
    plt.figure(figsize=(10,5))
    for col in rolling.columns:
        plt.plot(rolling.index, rolling[col], label=col)
    plt.title("7-дневное скользящее среднее упоминаний")
    plt.xlabel("Дата")
    plt.ylabel("Среднее значение")
    plt.legend()
    plt.tight_layout()
    plt.savefig(f"{out_dir}/plot3_rolling.png")
    plt.close()


def plot4_monthly(ts: pd.DataFrame, out_dir: str):
    """Месячная агрегация упоминаний."""
    monthly = ts.resample('M').sum()
    plt.figure(figsize=(10,5))
    monthly.plot(kind='bar')
    plt.title("Месячные упоминания")
    plt.xlabel("Месяц")
    plt.ylabel("Количество упоминаний")
    plt.tight_layout()
    plt.savefig(f"{out_dir}/plot4_monthly.png")
    plt.close()


def plot5_pie_sources(df: pd.DataFrame, out_dir: str):
    """Круговая диаграмма распределения упоминаний по источникам."""
    src_counts = df['source'].value_counts().head(10)
    plt.figure(figsize=(6,6))
    src_counts.plot(kind='pie', autopct='%1.1f%%', startangle=90)
    plt.title("Топ-10 источников")
    plt.ylabel("")
    plt.tight_layout()
    plt.savefig(f"{out_dir}/plot5_pie_sources.png")
    plt.close()


def plot6_weekday(ts: pd.DataFrame, out_dir: str):
    """Распределение упоминаний по дням недели."""
    weekdays = ts.copy()
    weekdays['weekday'] = weekdays.index.day_name()
    wd_counts = weekdays.groupby('weekday').sum().reindex([
        'Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'
    ]).sum(axis=1)
    plt.figure(figsize=(8,5))
    wd_counts.plot(kind='bar')
    plt.title("Упоминания по дням недели")
    plt.xlabel("День недели")
    plt.ylabel("Количество упоминаний")
    plt.tight_layout()
    plt.savefig(f"{out_dir}/plot6_weekday.png")
    plt.close()


def plot7_top_days(ts: pd.DataFrame, out_dir: str):
    """Топ-10 дней по суммарным упоминаниям."""
    top_days = ts.sum(axis=1).sort_values(ascending=False).head(10)
    plt.figure(figsize=(8,5))
    top_days.plot(kind='bar')
    plt.title("Топ-10 самых активных дней")
    plt.xlabel("Дата")
    plt.ylabel("Всего упоминаний")
    plt.tight_layout()
    plt.savefig(f"{out_dir}/plot7_top_days.png")
    plt.close()


def plot8_cumulative(ts: pd.DataFrame, out_dir: str):
    """Накопительный график упоминаний за год."""
    cum = ts.cumsum()
    plt.figure(figsize=(10,5))
    for col in cum.columns:
        plt.plot(cum.index, cum[col], label=col)
    plt.title("Накопительная кривая упоминаний")
    plt.xlabel("Дата")
    plt.ylabel("Кумулятивное количество")
    plt.legend()
    plt.tight_layout()
    plt.savefig(f"{out_dir}/plot8_cumulative.png")
    plt.close()


def plot9_ratio(ts: pd.DataFrame, out_dir: str):
    """Соотношение упоминаний Macron к Le Pen."""
    keys = ts.columns.tolist()
    if len(keys) >= 2:
        # вычисляем отношение, избегаем деления на ноль
        ratio = ts[keys[0]] / ts[keys[1]].replace(0, pd.NA)
        # убираем пропущенные значения перед рисованием
        ratio = ratio.dropna()
        plt.figure(figsize=(10,5))
        plt.plot(ratio.index, ratio, label=f"{keys[0]}/{keys[1]}")
        plt.title(f"Соотношение упоминаний {keys[0]} к {keys[1]}")
        plt.xlabel("Дата")
        plt.ylabel("Соотношение")
        plt.legend()
        plt.tight_layout()
        plt.savefig(f"{out_dir}/plot9_ratio.png")
        plt.close()


def plot10_correlation(ts: pd.DataFrame, out_dir: str):
    """Корреляционная матрица между рядами упоминаний."""
    corr = ts.corr()
    plt.figure(figsize=(6,6))
    im = plt.imshow(corr, vmin=-1, vmax=1)
    plt.colorbar(im, label='Корреляция')
    plt.xticks(range(len(corr)), corr.columns, rotation=45)
    plt.yticks(range(len(corr)), corr.columns)
    plt.title("Корреляция временных рядов")
    plt.tight_layout()
    plt.savefig(f"{out_dir}/plot10_correlation.png")
    plt.close()
