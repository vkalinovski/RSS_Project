# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y_j7EBQXocwJpJVWDYcIBhyr2w0ZG75C
"""

# Визуализация для полного охвата с 2025-01-01 и ключевыми интервалами

import pandas as pd
import matplotlib.pyplot as plt

def plot_overall_timeseries(ts: pd.DataFrame, out_dir: str):
    """Ежедневные упоминания с 1 января 2025 по сегодня."""
    start = pd.to_datetime("2025-01-01")
    sub = ts[ts.index >= start]
    plt.figure(figsize=(10, 5))
    for col in sub.columns:
        plt.plot(sub.index, sub[col], label=col)
    plt.title("Ежедневные упоминания (с 2025-01-01)")
    plt.xlabel("Дата"); plt.ylabel("Количество")
    plt.legend(); plt.tight_layout()
    plt.savefig(f"{out_dir}/plot_overall_timeseries.png")
    plt.close()

def plot_monthly_aggregation(ts: pd.DataFrame, out_dir: str):
    """Месячная агрегация упоминаний за всё время."""
    monthly = ts.resample("M").sum()
    plt.figure(figsize=(10, 5))
    monthly.plot(kind="bar")
    plt.title("Месячные упоминания (всего)")
    plt.xlabel("Месяц"); plt.ylabel("Сумма упоминаний")
    plt.tight_layout(); plt.savefig(f"{out_dir}/plot_monthly.png"); plt.close()

def plot_weekly_aggregation(ts: pd.DataFrame, out_dir: str):
    """Недельная агрегация упоминаний за всё время."""
    weekly = ts.resample("W").sum()
    plt.figure(figsize=(10, 5))
    for col in weekly.columns:
        plt.plot(weekly.index, weekly[col], marker="o", label=col)
    plt.title("Недельные упоминания (всего)")
    plt.xlabel("Неделя"); plt.ylabel("Сумма упоминаний")
    plt.legend(); plt.tight_layout(); plt.savefig(f"{out_dir}/plot_weekly.png"); plt.close()

def plot_cumulative(ts: pd.DataFrame, out_dir: str):
    """Кумулятивные упоминания с 2025-01-01."""
    cum = ts.cumsum()
    cum = cum[cum.index >= pd.to_datetime("2025-01-01")]
    plt.figure(figsize=(10, 5))
    for col in cum.columns:
        plt.plot(cum.index, cum[col], label=col)
    plt.title("Кумулятивное число упоминаний (с 2025-01-01)")
    plt.xlabel("Дата"); plt.ylabel("Кумулятивно")
    plt.legend(); plt.tight_layout(); plt.savefig(f"{out_dir}/plot_cumulative.png"); plt.close()

def plot_sentiment_trends(df: pd.DataFrame, out_dir: str):
    """Динамика тональности по неделям для каждого политика."""
    df["week"] = pd.to_datetime(df["published_at"]).dt.to_period("W").apply(lambda r: r.start_time)
    sent = df.groupby(["week", "politician", "sentiment"]).size().unstack(fill_value=0)
    weeks = sent.index.levels[0]
    plt.figure(figsize=(10, 6))
    for (pol, label) in [(p, l) for p in df.politician.unique() for l in sent.columns]:
        series = sent.xs((slice(None), pol, label), level=(0,1,2))
        plt.plot(weeks, series, label=f"{pol} – {label}")
    plt.title("Тональность новостей по неделям")
    plt.xlabel("Номер недели"); plt.ylabel("Число статей")
    plt.legend(ncol=2, fontsize="small"); plt.tight_layout()
    plt.savefig(f"{out_dir}/plot_sentiment_trends.png"); plt.close()

def plot_top_sources(ts: pd.DataFrame, df: pd.DataFrame, out_dir: str):
    """Топ-5 источников для каждого политика за весь период."""
    plt.figure(figsize=(12, 6))
    for i, pol in enumerate(df["politician"].unique(), 1):
        plt.subplot(1, len(df["politician"].unique()), i)
        top = df[df["politician"]==pol]["source"].value_counts().head(5)
        top.plot(kind="bar")
        plt.title(pol); plt.xlabel(""); plt.ylabel("Упоминаний")
    plt.suptitle("Топ-5 источников по политику"); plt.tight_layout(rect=[0,0,1,0.95])
    plt.savefig(f"{out_dir}/plot_top_sources.png"); plt.close()
